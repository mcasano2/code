#include <stdlib.h>
#include <stdio.h>
#include <termios.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <inttypes.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <signal.h>
#include "linuxanalog.h"

void alarm_handler(int sig);
void setup_alarm_handler();
void setup_clock(double hertz);

uint16_t high_val;
uint16_t low_val;
uint8_t state;

int main(int argc, char* argv[]) 
{
	double voltage1 = 0, voltage2 = 0, frequency = 0;
	struct timespec maxtime;
        

	int clock=clock_getres(CLOCK_REALTIME, &maxtime);
        double nsecs = (pow(10,9) * maxtime.tv_nsec)/2;
  
	das1602_initialize();

	printf("Enter  voltage #1 (-5 to +5 volts, other to quit): ");
	scanf("%lf", &voltage1);
	if((voltage1 < -5.0) | (voltage1 > 5.0))
	{
		return 0;
	}


        printf("Enter  voltage #2 (-5 to +5 volts, other to quit): ");
	scanf("%lf", &voltage2);
	if((voltage2 < -5.0) | (voltage2 > 5.0))
	{
		return 0;
	}

	printf("Enter frequency (0 to %f Hz), other to quit): ", nsecs);
	scanf("%lf", &frequency);
	if((frequency < 0) | (frequency > nsecs))
	{
		return 0;
	}


        setup_alarm_handler();
        
        high_val = voltage_to_uint12(voltage2);
        low_val = voltage_to_uint12(voltage1);

        setup_clock(frequency);

	// Do some busy work for forever. The square wave should be generated by the time handler.
	uint32_t counter = 0;

	while(1) 
	{
		counter++;
		//Output the count value after every 100 million loops
		if((counter % 100000000) == 0) 
		{
			printf("Counter: %u\n", counter);
		}
	}

	return 0;
}

void setup_clock(double hertz)
{
    printf("Setting up clock.\n");
    long tv_nsec = (1/(hertz * 2)) * pow(10,9);

    struct itimerspec timespec;
    memset(&timespec, 0, sizeof (timespec));
    printf("memsat.\n");

    timespec.it_interval.tv_nsec = tv_nsec;


    timer_t timer;
    memset(&timer, 0, sizeof timer);
    timer_create(CLOCK_REALTIME, NULL, &timer);
    timer_settime(timer, 0, &timespec, NULL);




//    struct sigevent timer_event;

//    memset(&timer_event, 0, sizeof (timer_event));
//    timer_event.sigev_notify = SIGEV_SIGNAL;
//    timer_event.sigev_signo = SIGALRM;

    
}

void setup_alarm_handler()
{
    printf("Setting alarm handler.\n");

    struct sigaction action;
    memset(&action, 0, sizeof(action));
    action.sa_handler = alarm_handler;
    if(sigaction(SIGALRM, &action, NULL) != 0)
    {
        perror("sigaction");
        exit(0);
    }
}

void alarm_handler(int sig)
{
    if(state)
        dac(high_val);
    else
        dac(low_val);
    
    state = !state;
}
